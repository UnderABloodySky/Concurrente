-- Secuenciador Ternario:
Se desea implementar usando monitores un secuenciador ternario para coordinar a N threads. Un secuenciador ternario provee tres operaciones primero, segundo, tercero. La idea es que cada uno de los threads puede invocar a cualquiera de las operaciones. El secuenciador alternará cíclicamente la ejecución de primero, luego de segundo, y finalmente tercero. 

monitor SecuenciadorTermario{
	private Int turn = 0;
	private Condition first = new Condition();
	private Condition second = new Condition();
	private Condition third = new Condition();

	public void first(){
		while(this.mustWait(0)){
			first.wait();
		}
		this.passToNextTurn();
		second.notify();
	}

	public void second(){
		while(this.mustWait(1)){
			second.wait();
		}
		this.passToNextTurn();
		third.notify();
	}
	
	public void first(){
		while(this.mustWait(2)){
			third.wait();
		}
		this.passToNextTurn();
		first.notify();
	}

	private Boolean mustWait(aTurn){
		return  turn != aTurn;
	}

	private void passToNextTurn(){
		count = count + 1 % 3;
	}
}


-- Grid:
En una red de energía inteligente los usuarios conectados pueden comportarse como consumidores o productores de energía (no ambos al mismo tiempo). Para registrar los cambios se desea utilizar un sistema implementado con un monitor. Por ejemplo el siguiente fragmento de código muestra un usuario que se comporta como consumidor por una hora y como productor por 2 horas:

	grid.startConsuming();
	sleep(1h);
	grid.stopConsuming();
	grid.startProducing();
	sleep(2h);
	grid.stopProducing();

Resuelva los siguientes escenarios usando monitores: 

a) Los usuarios siempre pueden comportarse como productores, pero sólo pueden comportarse como consumidores si hay una cantidad igual o mayor de productores. Además se debe garantizar que un productor no puede dejar de producir si no hay capacidad ociosa en la red, es decir, no puede dejar de producir si al hacerlo algún consumidor quedaría sin suministro.

monitor Grid{
	private Int productors = 0;
	private Int consumers = 0;
	private Condition lazyNet = new Condition();
	
	public void startProducing(){
		productors ++;
		lazyNet.notify();
	}
	
	public void stopProducing(){
		while(productors == consumers)
			lazyNet.wait();
		productors --;
	}
	
	public void startConsuming(){
		while(productors <= consumers)
			lazyNet.wait();
		consumers ++;		
	}
	
	public void stopConsuming(){
		consumers --;
		lazyNet.notify();
	}
}

b) Modifique su solución de forma tal que los usuarios no puedan comportarse como productores si la red tiene más de N productores ociosos, es decir, que el cambio a productor genere una espera mientras haya al menos N productores más que consumidores.

monitor Grid(n){
	private Int productors = 0;
	private Int consumers = 0;
	private Condition lazyNet = new Condition();
	private Condition lazyProducers = new Condition();
	
	public void startProducing(){
		while(producers - consumers >= n){
			lazyProducers.wait(); 		
		}
		productors ++;
		lazyNet.notify();
	}
	
	public void stopProducing(){
		while(productors == consumers)
			lazyNet.wait();
		productors --;
		lazyProducers.notify();
	}
	
	public void startConsuming(){
		while(productors <= consumers)
			lazyNet.wait();
		consumers ++;		
		lazyProducers.notify();
	}
	
	public void stopConsuming(){
		consumers --;
		lazyNet.notify();
	}
}

c) Extienda la solución anterior de forma tal que se priorice la salida de productores por sobre la entrada de consumidores nuevos. 

	// Falta //

-- Pizzeria:
En la pizzería del barrio se fabrican dos tipos de pizzas: las chicas y las grandes. El maestro pizzero va colocando de a una las pizzas listas en una barra para que los clientes se sirvan y pasen luego por la caja. Lamentablemente todos los clientes tienen buen apetito y se comportan de la siguiente manera: prefieren siempre tomar un pizza grande, pero si no lo logran se conforman con dos pequeñas. Los clientes son mal educados y no esperan en una cola (todos compiten por las pizzas). Dar una solución en donde cada cliente es modelado como un thread. Como mecanismo de sincronización, utilizar monitores. 


monitor Pizzeria(){
	private Condition hayPizza = new Condition();
	private Int cantidadPizzasChicas = 0;
	private Int cantidadPizzasGrandes = 0;

	public void producirPizzaChica(){
		cantidadPizzasChicas++;
		if (cantidadPizzasChicas % 2 == 0){
			hayPizza.notifyAll();
		}		
	}

	public void producirPizzaGrade(){
		cantidadPizzasGrandes++;
		hayPizza.notifyAll();
	}

	private Boolean hayCantidadIndicada(unaCantidadDePizzas, unaCantidadRequerida){
		return unaCantidadDePizzas >= unaCantidadRequerida
	}

	private Boolean hayPizzaGrande(){
		return this.hayCantidadIndicada(cantidadPizzasGrandes, 1); 
	}

	private Boolean hayPizzasChicas(){
		return this.hayCantidadIndicada(cantidadPizzasGrandes, 2);
	}

	public void retirarPizza(){
		while(!(this.hayPizzaGrande() || this.hayPizzasChicas())){
			hayPizza.wait();
		}
		if(this.hayPizzaGrande()){
			cantidadPizzasChicas -= 1;
		}
		else{
			cantidadPizzasChicas -= 2;
		}
	}	 	
}


-- Sala de exposición:
El comité organizador de una conferencia posee una sala para exposición de charlas. Las personas que desean asistir a una charla entran en la sala y esperan hasta que la charla comienza. Las charlas empiezan cuando el orador llega a la sala. Por respeto los asistentes no se retiran hasta que la charla termina ni entran cuando la charla ya ha comenzado. La sala posee una capacidad de 50 personas, sin contar al orador. De una solución usando monitores que modele los siguientes escenarios:

a) Se dispone de una sala para dar repetidas veces la misma charla. El orador descansa 5 minutos entre charla y charla. Si al momento de iniciar la charla el auditorio está vacío el orador descansa otros 5 minutos esperando que lleguen oyentes. Cuando el auditorio se llena los asistentes deben esperar a que comience la siguiente charla luego del descanso del orador. 


monitor SalaDeExposicion(Int n){
	private Int capacidad = 50;
	private Int asistentes = 0;
	private Int cantidadOradores = n;
	private Condition sePuedeEntrar = new Condition();
	private Condition sePuedeSalir = new Condition();
	private Boolean inicioCharla = false;
	
	public void entrarSala(){
		while(! this.puedeEntrar()){
			sePuedeEntrar.wait();
		}
		asistentes++;
	}

	private Boolean puedeEntrar(){
		return !inicioCharla && !this.capacidadMaximaAlcanzada() 
	}

	private Boolean capacidadMaximaAlcanzada(){
		return asistentes == capacidad;
	}

	public void salirSala(){
		while(! this.puedeSalir()){
			sePuedeSalir.wait();
		}
		asistentes--;
		sePuedeEntrar.notify();
	}

	private Boolean puedeSalir(){
		return !inicioCharla;
	}	
		
	public Boolean puedeEmpezarCharla(){
		return asistentes > 0;
	}

	public void iniciarCharla(){
		inicioCharla = true;
	}

	public void terminarCharla(){
		inicioCharla = false;
		sePuedeEntrar.notifyAll();
		sePuedeSalir.notifyAll();
	}
}

thread Orador(SalaDeExposicion sala):{
	while(true){
		if!(sala.puedeEmpezarCharla()){
			sleep(5");
		}
		sala.iniciarCharla();
		//Da la charla
		sala.terminarCharla();
		sleep(5");
	}
}


thread Asistente(SalaDeExposicion sala){
	sala.entrarSala();
	//Escucha la charla
	sala.salirCharla();
}


b) Al igual que en el punto a) se dispone de una sala para dar tres charlas distintas, pero en este caso los oradores esperan a que haya al menos 40 personas en el auditorio. 

monitor SalaDeExposicion(n){
	private Int capacidad = 50;
	private Int asistentes = 0;
	private Int turno = 0;
	private Int capacidadOradores = n;
	private Condition sePuedeEntrar = new Condition();
	private Condition sePuedeSalir = new Condition();
	private Condition[] sePuedeIniciarCharla = replicate(capacidadOradores, new Condition());
	private Boolean inicioCharla = false;

	public void entrarSala(){
		while(! this.puedeEntrar()){
			sePuedeEntrar.wait();
		}
		asistentes++;
	}

	private Boolean puedeEntrar(){
		return !inicioCharla && this.capacidadAlcanzada() 
	}

	private Boolean capacidadAlcanzada(){
		return asistentes == capacidad;
	}

	public void salirSala(){
		while(! this.puedeSalir()){
			sePuedeSalir.wait();
		}
		asistentes--;
		sePuedeEntrar.notify();
	}

	private Boolean puedeSalir(){
		return !inicioCharla;
	}	
		
	public Boolean puedeEmpezarCharla(Int id){
		while(id != turno){
			puedeEmpezarCharla[id].wait();
		}
		return true;
	}

	public Int cantidadGenteEnSala(){
		return asistentes
	}

	public void empezarCharla(){
		inicioCharla = true;
	}

	public void terminarCharla(){
		inicioCharla = false;
		puedeEmpezarCharla[this.next()].notify();
		sePuedeEntrar.notifyAll();
		sePuedeSalir.notifyAll();
	}

	private Int next(){
		turno = turno + 1 % cantidadDeOradores;
		return turno; 
	}
}


thread Orador(SalaDeExposicion sala, Int id):{
	while(true){
		if(sala.puedeEmpezarCharla(id)){
			//Intenta empezar la charla.	
			if(sala.cantidadGenteEnSala() < 40){
				sleep(5");
			}
			sala.iniciarCharla(id);
			//Da la charla
			sala.terminarCharla();
			sleep(5");
		}
	}
}

thread Asistente(SalaDeExposicion sala){
	sala.entrarSala();
	//Escucha la charla
	sala.salirCharla();
}





//Si deseo que el thread se bloquee los 5 minutos.

--ORador
thread Orador(SalaDeExposicion sala, Int id):{
	while(true){
		if(sala.puedeEmpezarCharla(id)){
			//Intenta empezar la charla.	
			while(sala.cantidadGenteEnSala() < 40){
				sala.bloquearOrador(5");
			}
			sala.iniciarCharla(id);
			//Da la charla
			sala.terminarCharla();
			sleep(5");
		}
	}
}



--En la Sala

public void desbloquearOrador(){
	bloquearOrador.notify();
}

public bloquearOrador(Int unTiempo){

		SalaDeAudiencia sala = self; 
		Thread Despertador(sala, unTiempo):{
			sleep(unTiempo);
			sala.desbloquearOrador;
		}
		bloquearOrador.wait();
}